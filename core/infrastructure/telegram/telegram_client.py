import logging
from typing import Optional, Any

import aiohttp
from fastapi import Request

from config.settings import get_tg_settings

logger = logging.getLogger("telegram_client")


class TelegramClient:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        session = aiohttp.ClientSession()
        client = TelegramClient(bot_token="YOUR_BOT_TOKEN", session=session)
        await client.send_message(chat_id=123456789, text="–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        base_url (str): –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram Bot API.
        session (aiohttp.ClientSession): –°–µ—Å—Å–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.
    """

    def __init__(self, bot_token: str, session: aiohttp.ClientSession):
        self.base_url: str = f"https://api.telegram.org/bot{bot_token}"
        self.session: aiohttp.ClientSession = session

    async def _request(self, method: str, payload: Optional[dict[str, Any]] = None) -> dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API.

        Args:
            method (str): –ú–µ—Ç–æ–¥ Telegram API (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'sendMessage').
            payload (Optional[dict]): –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ).

        Returns:
            dict: –û—Ç–≤–µ—Ç Telegram API.

        Raises:
            aiohttp.ClientError: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏.
        """
        url = f"{self.base_url}/{method}"
        try:
            if payload is not None:
                async with self.session.post(url, json=payload) as response:
                    data = await response.json()
            else:
                async with self.session.get(url) as response:
                    data = await response.json()
            if response.status != 200 or not data.get("ok", True):
                logger.error(f"Telegram API error: {response.status} {data}")
            return data
        except Exception as e:
            logger.exception(f"Telegram request failed: {e}")
            raise

    async def get_webhook_info(self) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook.
        """
        return await self._request("getWebhookInfo")

    async def set_webhook(
            self,
            webhook_url: str,
            secret_token: str,
            drop_pending_updates: bool = False,
    ) -> dict[str, Any]:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è Telegram –±–æ—Ç–∞.

        Args:
            webhook_url (str): URL –¥–ª—è webhook.
            secret_token (str): –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
            drop_pending_updates (bool): –°–±—Ä–∞—Å—ã–≤–∞—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook.
        """
        payload = {
            "url": webhook_url,
            "drop_pending_updates": drop_pending_updates,
            "secret_token": secret_token,
        }
        return await self._request("setWebhook", payload)

    async def send_message(
            self,
            chat_id: int,
            text: str,
            reply_markup: Optional[dict[str, Any]] = None,
    ) -> dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.

        Args:
            chat_id (int): ID —á–∞—Ç–∞ Telegram.
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            reply_markup (Optional[dict]): –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        payload: dict[str, Any] = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        return await self._request("sendMessage", payload)

    async def edit_message(
            self,
            chat_id: int,
            message_id: int,
            text: str,
            reply_markup: Optional[dict[str, Any]] = None,
    ) -> dict[str, Any]:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        Args:
            chat_id (int): ID —á–∞—Ç–∞ Telegram.
            message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
            text (str): –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            reply_markup (Optional[dict]): –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        payload: dict[str, Any] = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": "HTML",
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        return await self._request("editMessageText", payload)


async def ensure_webhook(
        tg_client: TelegramClient,
        webhook_url: str,
        secret_token: str,
) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π webhook –¥–ª—è Telegram-–±–æ—Ç–∞, –∏ –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ.

    Args:
        tg_client (TelegramClient): –≠–∫–∑–µ–º–ø–ª—è—Ä TelegramClient.
        webhook_url (str): –ñ–µ–ª–∞–µ–º—ã–π URL webhook.
        secret_token (str): –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram.
    """
    webhook_info = await tg_client.get_webhook_info()
    current_url = webhook_info.get("result", {}).get("url")
    if current_url != webhook_url:
        logger.info(f"üîó Webhook is missing or incorrect. Setting webhook to {webhook_url} ...")
        result = await tg_client.set_webhook(webhook_url, secret_token, drop_pending_updates=True)
        if result.get("ok"):
            logger.info("‚úÖ Webhook set successfully.")
        else:
            logger.error(f"‚ùå Failed to set webhook: {result}")
    else:
        logger.info(f"‚úÖ Webhook already set: {current_url}")


def get_tg_client(request: Request):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è TelegramClient –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ FastAPI.

    Args:
        request (Request): –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ FastAPI.

    Returns:
        TelegramClient: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Telegram.
    """
    tg_settings = get_tg_settings()
    session = request.app.state.aiohttp_session
    return TelegramClient(bot_token=tg_settings.bot_token, session=session)
