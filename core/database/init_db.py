import logging

from sqlalchemy import text

from core.config import tg_settings
from core.database.models import Base, User
from core.services.clients.sqlalchemy import sqlalchemy_engine, AsyncSessionLocal

logger = logging.getLogger(__name__)


async def init_db():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã,
    –∑–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–æ–≤.
    –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ logger.
    """
    try:
        async with sqlalchemy_engine.begin() as conn:
            result = await conn.execute(
                text("SELECT name FROM sqlite_master WHERE type='table' AND name='users';")
            )
            if result.first() is None:
                logger.info("üõ†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî —Å–æ–∑–¥–∞—ë–º...")
                await conn.run_sync(Base.metadata.create_all)
            else:
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
    except Exception as e:
        logger.error("‚ùå Database initialization failed", exc_info=e)
        return  # –∏–ª–∏ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å False/None, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await init_admin_flags()


async def init_admin_flags():
    """
    –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ is_admin=True –¥–ª—è –≤—Å–µ—Ö ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ TG_ADMIN_IDS.
    –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ logger.
    """
    try:
        async with AsyncSessionLocal.begin() as session:
            for admin_id in tg_settings.admin_ids:
                user = await session.get(User, admin_id)
                if user:
                    if not user.is_admin:
                        user.is_admin = True
                        logger.info(f"üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —Ç–µ–ø–µ—Ä—å admin")
                else:
                    session.add(User(
                        id=admin_id,
                        name="admin",
                        is_admin=True,
                        is_approved=True
                    ))
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —Å–æ–∑–¥–∞–Ω –∫–∞–∫ admin")
    except Exception as e:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥–∏ admin", exc_info=e)
