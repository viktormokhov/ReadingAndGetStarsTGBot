import logging
import random

from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from core import config
from core.constants import MAX_ATTEMPTS
from handlers import ui
from core.database import themes
from core.database.text_log import log_text_generation
from core.database.user_ops import add_stars, update_streak
from core.models.reading_state import ReadingState
from core.services.clients.sqlalchemy import AsyncSessionLocal
from core.services.cards.process_card_generation import process_card_generation
from handlers.ui.ui_main import categories_kb

logger = logging.getLogger(__name__)


async def save_card_and_notify(call: CallbackQuery, state: FSMContext, qs: ReadingState, dispatcher):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–∞—á–∏—Å–ª—è–µ—Ç –∑–≤–µ–∑–¥—ã, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏ –ø–æ–±–µ–¥–µ, –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    async with AsyncSessionLocal() as session:
        await log_text_generation(session, qs.uid, qs.theme)
        bonus = await update_streak(qs.uid, session)
        stars = calculate_stars(qs)
        earned = stars + bonus
        await add_stars(qs.uid, earned, session)

    await themes.inc_theme(qs.uid, qs.theme)

    message = build_result_message(qs, earned, bonus)
    await call.message.edit_text(message)

    if qs.wrong < MAX_ATTEMPTS:
        if not await process_card_generation(call, qs, logger, dispatcher=dispatcher):
            await call.message.answer("üìÇ –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=categories_kb())
            await state.clear()
            return

    await call.message.answer("üìÇ –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=categories_kb())
    await state.clear()


def calculate_stars(qs: ReadingState) -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."""
    base_stars = count_stars(qs.full_text)
    # –£—á—ë—Ç –æ—à–∏–±–æ–∫: —à—Ç—Ä–∞—Ñ = (1 - qs.wrong / total_questions)
    total = len(qs.qa)
    mistakes = qs.wrong

    # –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ —Å—Ç–æ–ª—å–∫–æ –∂–µ, —Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å—Ç–∞–≤–∏–º 0 –∑–≤—ë–∑–¥
    if mistakes == total:
        return 0
    return max(1, int(base_stars * (1 - 0.5 * (mistakes / total))))


def count_stars(text: str) -> int:
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: 1 –∑–∞ –∫–∞–∂–¥—ã–µ 10 —Å–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 1)."""
    return max(1, int(len(text.split()) * 0.1))


def build_result_message(qs: ReadingState, earned: int, bonus: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    total = len(qs.qa)
    mistakes = qs.wrong
    words = len(qs.full_text.split())
    if mistakes == 0:
        msg = random.choice([
            "–û—Ç–ª–∏—á–Ω–æ", "–ú–æ–ª–æ–¥–µ—Ü", "–¢—ã –∫—Ä—É—Ç–æ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ"
        ]) + f"!\n–ë–µ–∑ –æ—à–∏–±–æ–∫! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª <b>{earned}</b> ‚≠ê\nüìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–ª–æ–≤: <b>{words}</b>"
    else:
        msg = (f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—à–∏–±–æ–∫: {mistakes}/{total}\n"
               f"–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª <b>{earned}</b> ‚≠ê\nüìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–ª–æ–≤: <b>{words}</b>")
    if bonus:
        msg += f" (+{bonus} ‚≠ê –∑–∞ —Å–µ—Ä–∏—é)"
    return msg
