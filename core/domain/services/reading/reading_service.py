import asyncio

from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from bot.handlers.ui.ui_main import reading
from config.constants import DAILY_LIMIT_PER_THEME
from core.domain.models.state import ReadingState
from core.domain.services.ai.llm_text_content_generator import LLMTextContentGenerator
from core.infrastructure.database.repositories.sqlalchemy_user_repository import SQLAlchemyUserRepository


async def has_exceeded_daily_limit(uid: int, theme: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with SQLAlchemyUserRepository() as repo:
        count = await repo.get_generated_count_today_by_user(uid, theme)
        return count >= DAILY_LIMIT_PER_THEME


async def prepare_first_question(uid: int, category: str, theme: str) -> ReadingState:
    """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —Ç–µ–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with SQLAlchemyUserRepository() as repo:
        get_age = await repo.get_by_id(uid)
        age = get_age.age

    generator = LLMTextContentGenerator(
        uid=uid,
        theme=theme,
        age=age
    )
    e = await generator.generate_text(category)
    first = e["qa"][0]

    return ReadingState(
        uid=uid,
        theme=theme,
        qa=e["qa"],
        asked={first["question"]},
        correct=first["options"][0],
        wrong=0,
        card_title=e["card"],
        word_count=len(e["text"].split()),
        full_text=e["text"]
    )


async def prepare_next_question(call: CallbackQuery, state: FSMContext, qs: ReadingState):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –∑–∞–¥–∞—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ."""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ —Ñ–∏–¥–±–µ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        await call.bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    except Exception:
        pass

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    prev_fb_id = (await state.get_data()).get("feedback_msg_id")
    if prev_fb_id:
        try:
            await call.bot.delete_message(chat_id=call.message.chat.id, message_id=prev_fb_id)
        except Exception:
            pass

    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏–Ω–∞—á–µ ‚Äî –¥–æ–∫–∏–¥—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ
    next_q = next((qa for qa in qs.qa if qa["question"] not in qs.asked), None)
    # if not next_q:
    #     # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –¥–æ–±–∞–≤–∏–º –µ—â—ë (–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –Ω–∞–¥–æ)
    #     extra = await entry(qs.uid, qs.theme)
    #     qs.qa.extend(extra["qa"])
    #     next_q = extra["qa"][0]

    qs.correct = next_q["options"][0]
    qs.asked.add(next_q["question"])

    # –ù–æ–≤–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_fb = await call.message.answer("üí™ –ù–µ —Å–¥–∞–≤–∞–π—Å—è!", protect_content=True)
    qs.feedback_msg_id = sent_fb.message_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º state –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
    await state.update_data(**qs.__dict__)
    keyboard, options = reading(next_q["options"])
    await state.update_data(reading_options=options)

    # –ü–∞—É–∑–∞
    await asyncio.sleep(1)

    # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await call.message.answer(
        f"<b>{next_q['question']}</b>",
        protect_content=True,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
