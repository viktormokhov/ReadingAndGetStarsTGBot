from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fastapi import Depends

from config.settings import get_tg_settings
from core.infrastructure.database import user_ops
from core.infrastructure.database.models import User
from core.application.security.admin_only import admin_only
from bot.handlers.ui.ui_main import main_menu_inline_kb
from bot.handlers.ui.ui_admin import admin_back_menu_kb
from core.infrastructure.database.repositories.sqlalchemy_user_repository import SQLAlchemyUserRepository
from core.infrastructure.database.repository_factory import RepositoryFactory

router = Router()


# 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø ‚Äî —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∫–Ω–æ–ø–∫–∏ ¬´–û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª
@router.callback_query(F.data == "request_access")
async def request_access_callback(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø".
    –°—Ç–∞–≤–∏—Ç —Ñ–ª–∞–≥ has_requested_access = True –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    tg_settings = get_tg_settings()
    uid = call.from_user.id
    async with SQLAlchemyUserRepository() as repo:
        user = await repo.get_by_id(uid)

    if not user.has_requested_access:
        user.has_requested_access = True
    if not user or not user.name:
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.", show_alert=True)
        return

    # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
        callback_data=f"approve_user:{uid}"
    )
    builder.button(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data=f"deny_user:{uid}"
    )
    kb = builder.as_markup(row_width=2)

    # –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in tg_settings.tg_admin_id:
        await call.bot.send_message(
            chat_id=admin_id,
            text=f"üîî –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user.name} (ID: {uid})",
            reply_markup=kb,
            protect_content=True
        )

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.message.edit_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
    await call.answer()


# 2) –ê–¥–º–∏–Ω –∑–∞—Ö–æ–¥–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª ¬´–ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø¬ª ‚Äî –≤–∏–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö
@router.callback_query(F.data == "admin:requests")
@admin_only()
async def show_requests(call: CallbackQuery, is_admin: bool):
    await call.answer()

    async with SQLAlchemyUserRepository() as repo:
        users = await repo.get_not_approved()
    if not users:
        # –í—Å–µ –æ–¥–æ–±—Ä–µ–Ω—ã ‚Äî —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
        await call.message.edit_text("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–¥–æ–±—Ä–µ–Ω—ã.", reply_markup=admin_back_menu_kb())
        return

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ ‚Äî –≤—ã–≤–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    for user in users:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_user:{user.id}")
        builder.button(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å",  callback_data=f"deny_user:{user.id}")
        kb = builder.as_markup(row_width=2)

        await call.message.answer(
            f"‚Ä¢ ID: {user.id}\n–ò–º—è: {user.name or '‚Äî'}",
            reply_markup=kb
        )

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞
    kb_back = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="admin:menu")]
    ])
    await call.message.answer("üîô –í –º–µ–Ω—é", reply_markup=kb_back)


# 3) –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ approve/deny ‚Äî –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –ª–æ–≥–∏–∫–∞, —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥ is_approved
@router.callback_query(F.data.startswith("approve_user:"))
@admin_only()
async def approve_user(call: CallbackQuery, is_admin: bool):
    user_id = int(call.data.split(":", 1)[1])

    async with SQLAlchemyUserRepository() as repo:
        user = await repo.get_by_id(user_id)

    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    if user.is_approved:
        await call.answer("–£–∂–µ –æ–¥–æ–±—Ä–µ–Ω", show_alert=True)
        return
    user.is_approved = True

    # –°–æ–æ–±—â–∞–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ
    await call.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name or user.id} –æ–¥–æ–±—Ä–µ–Ω.")
    await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω")

    # –ò —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await call.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –î–æ—Å—Ç—É–ø –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω. –í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_menu_inline_kb()
        )
    except Exception:
        pass


@router.callback_query(F.data.startswith("deny_user:"))
@admin_only()
async def deny_user(call: CallbackQuery, is_admin: bool):
    user_id = int(call.data.split(":", 1)[1])

    async with SQLAlchemyUserRepository() as repo:
        user = repo.get_by_id(user_id)

    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await s.delete(user)

    # –°–æ–æ–±—â–∞–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ
    await call.message.edit_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name or user.id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω.")
    await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω", show_alert=True)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await call.bot.send_message(
            chat_id=user_id,
            text="üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."
        )
    except Exception:
        pass
